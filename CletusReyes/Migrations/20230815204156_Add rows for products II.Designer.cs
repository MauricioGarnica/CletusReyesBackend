// <auto-generated />
using System;
using CletusReyes.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CletusReyes.Migrations
{
    [DbContext(typeof(CletusReyesDbContext))]
    [Migration("20230815204156_Add rows for products II")]
    partial class AddrowsforproductsII
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Auth.TblRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "31f16eb0-8649-4015-9edd-b179b461a2dd",
                            ConcurrencyStamp = "31f16eb0-8649-4015-9edd-b179b461a2dd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f71926a4-5573-4a11-bb9c-875d856cd446",
                            ConcurrencyStamp = "f71926a4-5573-4a11-bb9c-875d856cd446",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Auth.TblUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Auth.TblUserRoles", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Category.TblCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffbf969b-36bb-47b3-a3ee-840523779c01"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "GUANTES",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("3f98d5d2-f4be-4e0a-9b07-07f212973b0d"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "PROTECCION",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("68598c64-99c6-487c-b0f8-c0044c137596"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "COSTALES DE BOX",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("f63758e5-61e2-4bf3-925c-0cf137216fe6"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "COACHING",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("35e3e543-5807-4805-890e-1d257fbeeee7"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "ROPA Y CALZADO",
                            Status = true
                        });
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Person.TblPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Birthday")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Product.TblProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SizeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05ca4c98-738a-47d0-ad57-0837f79042d6"),
                            CategoryId = new Guid("ffbf969b-36bb-47b3-a3ee-840523779c01"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            FileDescription = "",
                            FileExtension = ".jpg",
                            FileName = "Guantesrojos16oz",
                            FilePath = "https://localhost:7088/Images/Guantesrojos16oz.jpg",
                            FileSizeInBytes = 0L,
                            MaxValue = 15,
                            MinValue = 3,
                            Name = "Guantes rojos 16oz",
                            Price = 1250.0,
                            Quantity = 10,
                            SizeId = new Guid("24d0f481-814c-41b3-b0d8-4c875d89a95d"),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("6cbd63b4-f0c6-4cc8-99ca-6263e150e474"),
                            CategoryId = new Guid("ffbf969b-36bb-47b3-a3ee-840523779c01"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            FileDescription = "",
                            FileExtension = ".jpg",
                            FileName = "Guantesnegros16oz",
                            FilePath = "https://localhost:7088/Images/Guantesnegros16oz.jpg",
                            FileSizeInBytes = 0L,
                            MaxValue = 20,
                            MinValue = 5,
                            Name = "Guantes negros 16oz",
                            Price = 1150.0,
                            Quantity = 10,
                            SizeId = new Guid("24d0f481-814c-41b3-b0d8-4c875d89a95d"),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("45715fa2-fdb2-4ced-8c21-76d71f374037"),
                            CategoryId = new Guid("ffbf969b-36bb-47b3-a3ee-840523779c01"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            FileDescription = "",
                            FileExtension = ".png",
                            FileName = "Guantesrojos14oz",
                            FilePath = "https://localhost:7088/Images/Guantesrojos14oz.png",
                            FileSizeInBytes = 0L,
                            MaxValue = 12,
                            MinValue = 2,
                            Name = "Guantes rojos 14oz",
                            Price = 1300.0,
                            Quantity = 8,
                            SizeId = new Guid("1afcad04-bae2-4edd-a936-7eea79380149"),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("b028a88c-80ea-4b62-8a45-4059d5dedf01"),
                            CategoryId = new Guid("ffbf969b-36bb-47b3-a3ee-840523779c01"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            FileDescription = "",
                            FileExtension = ".jpg",
                            FileName = "Guantesnegros14oz",
                            FilePath = "https://localhost:7088/Images/Guantesnegros14oz.jpg",
                            FileSizeInBytes = 0L,
                            MaxValue = 11,
                            MinValue = 3,
                            Name = "Guantes negros 14oz",
                            Price = 1250.0,
                            Quantity = 8,
                            SizeId = new Guid("1afcad04-bae2-4edd-a936-7eea79380149"),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("9591d94e-2a82-49c5-ad1f-2dd1b7fa6837"),
                            CategoryId = new Guid("ffbf969b-36bb-47b3-a3ee-840523779c01"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            FileDescription = "",
                            FileExtension = ".jpeg",
                            FileName = "Guantesrojos12oz",
                            FilePath = "https://localhost:7088/Images/Guantesrojos12oz.jpeg",
                            FileSizeInBytes = 0L,
                            MaxValue = 10,
                            MinValue = 2,
                            Name = "Guantes rojos 12oz",
                            Price = 1400.0,
                            Quantity = 6,
                            SizeId = new Guid("4847982e-f6e4-4d30-acfa-d4d3eb774025"),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("d13a1ae6-4dc0-4bb3-bf1d-184ac3d18885"),
                            CategoryId = new Guid("ffbf969b-36bb-47b3-a3ee-840523779c01"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            FileDescription = "",
                            FileExtension = ".jpeg",
                            FileName = "Guantesnegros12oz",
                            FilePath = "https://localhost:7088/Images/Guantesnegros12oz.jpeg",
                            FileSizeInBytes = 0L,
                            MaxValue = 13,
                            MinValue = 4,
                            Name = "Guantes negros 12oz",
                            Price = 1000.0,
                            Quantity = 6,
                            SizeId = new Guid("4847982e-f6e4-4d30-acfa-d4d3eb774025"),
                            Status = true
                        });
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Provider.TblProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32a9172e-d7fd-4b44-83cc-48bfed5a80a1"),
                            Address = "Blvd. Torres Landa #3301 Col.Arroyo Hondo",
                            BusinessName = "Medina Torres",
                            ContactEmail = "info@medinatorres.com",
                            ContactName = "Juan Medina",
                            ContactPhone = "4777181780",
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("e1174f5b-5e16-4bc1-8c31-7e8e89e6022e"),
                            Address = "Monte Carmelo #112 Col.Arroyo Hondo",
                            BusinessName = "Curtiembres de México",
                            ContactEmail = "info@curtiembresdemexico.com",
                            ContactName = "Sebastian Perez",
                            ContactPhone = "4777780079",
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("cc1fa6e7-bee4-4e34-b427-f26ebb6314c8"),
                            Address = "Av.Transportistas #301 Col.Unidad Obrera",
                            BusinessName = "Lefarc",
                            ContactEmail = "mercadotecnia@lefarc.com",
                            ContactName = "Alonso Hernandez",
                            ContactPhone = "4774702828",
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("66398fad-6c5a-4608-9a3e-dc9b58be6cf5"),
                            Address = "Blvd.Timoteo Lozano #101-B Col.San Miguel",
                            BusinessName = "Simon Quimica",
                            ContactEmail = "ventassq@simonquimica.mx",
                            ContactName = "Erika Serrato",
                            ContactPhone = "4777705252",
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("753ff726-1613-4e81-b936-39ecd53259d1"),
                            Address = "Boulevard Prolongación Tepeyac #1304 local 2 Col. Prados Verdes",
                            BusinessName = "Velcro Brand",
                            ContactEmail = "btlalolini@prodigy.net.mx",
                            ContactName = "Bruno Tlalolini",
                            ContactPhone = "4777747540",
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("4e097db4-5534-4d4b-b16c-4ce2550d9d32"),
                            Address = "Blvd.Antonio Madrazo #1216 Col.El Cortijo",
                            BusinessName = "Espumax",
                            ContactEmail = "espumax@gmail.com",
                            ContactName = "Ivan Sanchez",
                            ContactPhone = "4772335162",
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("2802ecd1-0b0f-46d0-8cd8-bb94be233e9e"),
                            Address = "Blvd. Hermenegildo Bustos #2217 col.Unidad Obrera Infonavit",
                            BusinessName = "Hilos Modiz",
                            ContactEmail = "modiz@gmail.com",
                            ContactName = "Araceli Gutierrez",
                            ContactPhone = "4777180275",
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Status = true
                        });
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Purchase_Order.TblPurchaseOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("PurchaseOrderHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderHeaderId");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("PurchaseOrderDetails");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Purchase_Order.TblPurchaseOrderHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseOrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<string>("Updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("PurchaseOrderStatusId");

                    b.ToTable("PurchaseOrderHeaders");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Purchase_Order.TblPurchaseOrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrderStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6967f493-61ef-41af-b785-a9a8649e8767"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "SOLICITADA",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("e2d2d115-764b-4264-a6a9-4a1f4d5f4dd4"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "EN CAMINO",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("5e257c72-e959-4d0d-9894-1c8682515a3a"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "ENTREGADA",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("196f0047-4231-4160-8d4e-124b8437dfac"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "CANCELADA",
                            Status = true
                        });
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Raw_Material.TblRawMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MaxValue")
                        .HasColumnType("real");

                    b.Property<float>("MinValue")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("UnitMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UnitMeasureId");

                    b.ToTable("RawMaterials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("758a1a4e-c7f8-4058-a7c4-2602c0298b32"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 30000f,
                            MinValue = 1500f,
                            Name = "Piel de vaca color rojo",
                            Price = 350.0,
                            ProviderId = new Guid("32a9172e-d7fd-4b44-83cc-48bfed5a80a1"),
                            Quantity = 15000f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("f11ccf0f-f8e9-4fda-8677-6992dd53a64b"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 20000f,
                            MinValue = 1000f,
                            Name = "Piel de vaca color negro",
                            Price = 325.0,
                            ProviderId = new Guid("32a9172e-d7fd-4b44-83cc-48bfed5a80a1"),
                            Quantity = 7000f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("72294d1e-133a-4c69-9eb9-df383ad49819"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 25000f,
                            MinValue = 2000f,
                            Name = "Piel de vaca color dorado",
                            Price = 450.0,
                            ProviderId = new Guid("32a9172e-d7fd-4b44-83cc-48bfed5a80a1"),
                            Quantity = 12000f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("5eb8fffa-c508-47a6-a662-0452993ea114"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 40000f,
                            MinValue = 2000f,
                            Name = "Piel de vaca color blanco",
                            Price = 375.0,
                            ProviderId = new Guid("32a9172e-d7fd-4b44-83cc-48bfed5a80a1"),
                            Quantity = 20000f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("dff9d777-3531-4d9c-abcf-78f4fbff80fa"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 100000f,
                            MinValue = 2000f,
                            Name = "Piel sintetica color negro",
                            Price = 150.0,
                            ProviderId = new Guid("66398fad-6c5a-4608-9a3e-dc9b58be6cf5"),
                            Quantity = 3500f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("d9fd1206-ccf1-44e6-979d-0d2dac1bccbd"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 10000f,
                            MinValue = 200f,
                            Name = "Piel sintetica color rojo",
                            Price = 125.0,
                            ProviderId = new Guid("66398fad-6c5a-4608-9a3e-dc9b58be6cf5"),
                            Quantity = 3500f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("3bb6c3af-9fcc-462e-9f31-b7a20fd413d4"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 9000f,
                            MinValue = 200f,
                            Name = "Piel sintetica color blanco",
                            Price = 100.0,
                            ProviderId = new Guid("66398fad-6c5a-4608-9a3e-dc9b58be6cf5"),
                            Quantity = 3500f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("d4736685-9730-40fd-a18e-5d7bdff280e2"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 11000f,
                            MinValue = 500f,
                            Name = "Piel sintetica color dorado",
                            Price = 200.0,
                            ProviderId = new Guid("66398fad-6c5a-4608-9a3e-dc9b58be6cf5"),
                            Quantity = 3500f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("5ce0a50e-d43f-479c-a51d-5792c2405555"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 100f,
                            MinValue = 5f,
                            Name = "Goma espuma de 100*100cm",
                            Price = 350.0,
                            ProviderId = new Guid("4e097db4-5534-4d4b-b16c-4ce2550d9d32"),
                            Quantity = 56f,
                            Status = true,
                            UnitMeasureId = new Guid("7220fd18-43fe-4880-eb95-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("250b5182-f96d-422f-9efd-0afd55221143"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 10000f,
                            MinValue = 200f,
                            Name = "Hilo negro",
                            Price = 100.0,
                            ProviderId = new Guid("2802ecd1-0b0f-46d0-8cd8-bb94be233e9e"),
                            Quantity = 5000f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("0056c142-13f2-465d-824d-4299eaa3d45d"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 10000f,
                            MinValue = 200f,
                            Name = "Hilo blanco",
                            Price = 100.0,
                            ProviderId = new Guid("2802ecd1-0b0f-46d0-8cd8-bb94be233e9e"),
                            Quantity = 5000f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("db9e6ef4-d516-448d-9c40-1ba7b7b83af2"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 10000f,
                            MinValue = 200f,
                            Name = "Hilo rojo",
                            Price = 100.0,
                            ProviderId = new Guid("2802ecd1-0b0f-46d0-8cd8-bb94be233e9e"),
                            Quantity = 5000f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("bc94f5cf-8b87-4860-8fb4-a5794f06833d"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "",
                            MaxValue = 10000f,
                            MinValue = 200f,
                            Name = "Hilo dorado",
                            Price = 100.0,
                            ProviderId = new Guid("2802ecd1-0b0f-46d0-8cd8-bb94be233e9e"),
                            Quantity = 5000f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("bb156abe-638f-4243-b338-5f7ed26d2f47"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "Rollos de 100cm con 10cm de espesor",
                            MaxValue = 20000f,
                            MinValue = 500f,
                            Name = "Velcro negro",
                            Price = 250.0,
                            ProviderId = new Guid("753ff726-1613-4e81-b936-39ecd53259d1"),
                            Quantity = 5000f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("279b5ed0-e9e0-4e2c-88fd-176ad5b8847a"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "Rollos de 100cm con 10cm de espesor",
                            MaxValue = 20000f,
                            MinValue = 500f,
                            Name = "Velcro rojo",
                            Price = 235.0,
                            ProviderId = new Guid("753ff726-1613-4e81-b936-39ecd53259d1"),
                            Quantity = 5000f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        },
                        new
                        {
                            Id = new Guid("83e4c615-648c-4405-aed6-bbd084ea105f"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Description = "Rollos de 100cm con 10cm de espesor",
                            MaxValue = 20000f,
                            MinValue = 500f,
                            Name = "Velcro blanco",
                            Price = 235.0,
                            ProviderId = new Guid("753ff726-1613-4e81-b936-39ecd53259d1"),
                            Quantity = 5000f,
                            Status = true,
                            UnitMeasureId = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb")
                        });
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Recipe.TblRecipeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipeHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RawMaterialId");

                    b.HasIndex("RecipeHeaderId");

                    b.ToTable("RecipeDetails");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Recipe.TblRecipeHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("RecipeHeaders");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Sale_Order.TblSaleOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SaleOrderHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderHeaderId");

                    b.ToTable("SaleOrderDetails");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Sale_Order.TblSaleOrderHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SaleOrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<string>("Updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserIdUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SaleOrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("SaleOrderHeaders");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Sale_Order.TblSaleOrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleOrderStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34e82473-b511-4b31-a94e-304130ee2ede"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "PEDIDO",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("bf341b19-7e2e-492e-8aef-ebab9c33fe09"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "ELABORANDO",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("aeb24d0e-7e62-4183-ace1-4401939ddce6"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "EMPACANDO",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("25a4b068-bc82-4684-8bc5-5c4087d487e4"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "ENVIANDO",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("d5f1c029-61cf-4273-a3d7-431c110e4f15"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "ENTREGADO",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("cb22b5ba-8792-4675-88bb-e33beb098b7d"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "CANCELADO",
                            Status = false
                        });
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Size.TblSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4847982e-f6e4-4d30-acfa-d4d3eb774025"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Size = "12oz",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("1afcad04-bae2-4edd-a936-7eea79380149"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Size = "14oz",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("24d0f481-814c-41b3-b0d8-4c875d89a95d"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Size = "16oz",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("98838e4b-fae5-4ae8-9cc3-05b794dc322e"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Size = "CHICO",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("83a96764-b2e4-4794-8f0a-69de7fe48143"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Size = "MEDIANO",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("515d8c75-f2f2-4473-8f82-405dedb5d613"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Size = "GRANDE",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("e38bff0e-b36d-4dd6-99b6-c23ee4e4a05a"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Size = "NO APLICA",
                            Status = true
                        });
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Unit_Measure.TblUnitMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Updated_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitMeasures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92743a31-78d1-4e8a-eb94-08db979fe8cb"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "CM",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("7220fd18-43fe-4880-eb95-08db979fe8cb"),
                            Created_at = "15/08/2023 02:41:56 p. m.",
                            Name = "PZ",
                            Status = true
                        });
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Auth.TblUserRoles", b =>
                {
                    b.HasOne("CletusReyes.Models.Domain_Model.Auth.TblRoles", "Roles")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CletusReyes.Models.Domain_Model.Auth.TblUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Person.TblPerson", b =>
                {
                    b.HasOne("CletusReyes.Models.Domain_Model.Auth.TblUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Product.TblProduct", b =>
                {
                    b.HasOne("CletusReyes.Models.Domain_Model.Category.TblCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CletusReyes.Models.Domain_Model.Size.TblSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Purchase_Order.TblPurchaseOrderDetail", b =>
                {
                    b.HasOne("CletusReyes.Models.Domain_Model.Purchase_Order.TblPurchaseOrderHeader", "PurchaseOrderHeader")
                        .WithMany("Details")
                        .HasForeignKey("PurchaseOrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CletusReyes.Models.Domain_Model.Raw_Material.TblRawMaterial", "RawMaterial")
                        .WithMany()
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrderHeader");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Purchase_Order.TblPurchaseOrderHeader", b =>
                {
                    b.HasOne("CletusReyes.Models.Domain_Model.Provider.TblProvider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CletusReyes.Models.Domain_Model.Purchase_Order.TblPurchaseOrderStatus", "PurchaseOrderStatus")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("PurchaseOrderStatus");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Raw_Material.TblRawMaterial", b =>
                {
                    b.HasOne("CletusReyes.Models.Domain_Model.Provider.TblProvider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CletusReyes.Models.Domain_Model.Unit_Measure.TblUnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Recipe.TblRecipeDetail", b =>
                {
                    b.HasOne("CletusReyes.Models.Domain_Model.Raw_Material.TblRawMaterial", "RawMaterial")
                        .WithMany()
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CletusReyes.Models.Domain_Model.Recipe.TblRecipeHeader", "RecipeHeader")
                        .WithMany("Details")
                        .HasForeignKey("RecipeHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");

                    b.Navigation("RecipeHeader");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Recipe.TblRecipeHeader", b =>
                {
                    b.HasOne("CletusReyes.Models.Domain_Model.Product.TblProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Sale_Order.TblSaleOrderDetail", b =>
                {
                    b.HasOne("CletusReyes.Models.Domain_Model.Product.TblProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CletusReyes.Models.Domain_Model.Sale_Order.TblSaleOrderHeader", "SaleOrderHeader")
                        .WithMany("Details")
                        .HasForeignKey("SaleOrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SaleOrderHeader");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Sale_Order.TblSaleOrderHeader", b =>
                {
                    b.HasOne("CletusReyes.Models.Domain_Model.Sale_Order.TblSaleOrderStatus", "SaleOrderStatus")
                        .WithMany()
                        .HasForeignKey("SaleOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CletusReyes.Models.Domain_Model.Auth.TblUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleOrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Auth.TblRoles", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Auth.TblUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Purchase_Order.TblPurchaseOrderHeader", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Recipe.TblRecipeHeader", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("CletusReyes.Models.Domain_Model.Sale_Order.TblSaleOrderHeader", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
